import org.apache.tools.ant.taskdefs.condition.Os

ext {
    drivers = ["firefox", "chrome", "phantomJs", "ie"]

    ext {
        groovyVersion = '2.4.1'
        gebVersion = '0.13.1'

        seleniumVersion = '2.53.0'
        chromeDriverVersion = '2.24'
        ieDriverVersion = '2.53.1'
        ieDriverVersionForDir = '2.53'
        phantomJsVersion = '2.1.1'
        phantomJsLibVersion = '+'
    }
}

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'org.yaml:snakeyaml:1.5'
    }
}

apply {
    plugin "groovy"
    plugin "idea"
    plugin "eclipse"
}
apply from: "gradle/idea.gradle"
apply from: "gradle/ci.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    jcenter()
}

dependencies {
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.gebish:geb-junit4:$gebVersion"

    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$ieDriverVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile("com.codeborne:phantomjsdriver:${phantomJsLibVersion}") {
        transitive = false
    }
    testCompile "org.yaml:snakeyaml:1.5"
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

ieTest {
    dependsOn unzipIEDriver

    def iedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "IEDriverServer.exe" : "IEDriverServer"
    systemProperty "webdriver.ie.driver", new File(unzipIEDriver.outputs.files.singleFile, iedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "bin/phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}


tasks.withType(AbstractCompile)*.options*.encoding = "UTF-8"
tasks.withType(GroovyCompile)*.groovyOptions*.encoding = "UTF-8"
